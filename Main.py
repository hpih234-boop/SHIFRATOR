import os
import secrets
import string
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, scrolledtext, filedialog
from tkinter import font as tkfont
import random
import hashlib
import base64
import binascii

# –ê–ª—Ñ–∞–≤–∏—Ç—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
russian_upper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
russian_lower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
english_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
english_lower = "abcdefghijklmnopqrstuvwxyz"
digits = "0123456789"

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.setup_ui()
    
    def setup_ui(self):
        self.root.title("üîê –®–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫ –î–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(self.root, padding=15)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(
            self.main_frame, 
            text="–®–∏—Ñ—Ä–∞—Ç–æ—Ä –∏ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü–∞—Ä–æ–ª–µ–π", 
            font=('Helvetica', 16, 'bold')
        )
        header.pack(pady=(0, 15))
        
        # –í–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_encryption_tab()
        self.create_password_tab()
        self.create_document_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Label(
            self.main_frame, 
            text="–ì–æ—Ç–æ–≤–æ", 
            relief=tk.SUNKEN, 
            anchor=tk.W
        )
        self.status_bar.pack(fill=tk.X, pady=(10, 0))

    def ask_password(self, title, prompt):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        top = tk.Toplevel(self.root)
        top.title(title)
        top.geometry("400x200")
        
        frame = ttk.Frame(top)
        frame.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text=prompt).pack(pady=5)
        
        password_var = tk.StringVar()
        entry = ttk.Entry(frame, textvariable=password_var, show="*", width=40)
        entry.pack(pady=5)
        
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(pady=5)
        
        def paste_from_clipboard():
            try:
                clipboard_text = self.root.clipboard_get()
                if clipboard_text:
                    password_var.set(clipboard_text)
            except:
                pass
        
        ttk.Button(btn_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞", command=paste_from_clipboard).pack(side=tk.LEFT, padx=5)
        
        show_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(btn_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å", variable=show_var,
                      command=lambda: entry.config(show="" if show_var.get() else "*")).pack(side=tk.LEFT, padx=5)
        
        result = None
        
        def on_ok():
            nonlocal result
            result = password_var.get()
            top.destroy()
        
        def on_cancel():
            nonlocal result
            result = None
            top.destroy()
        
        btn_frame2 = ttk.Frame(frame)
        btn_frame2.pack(pady=10)
        
        ttk.Button(btn_frame2, text="OK", command=on_ok).pack(side=tk.LEFT, padx=10)
        ttk.Button(btn_frame2, text="–û—Ç–º–µ–Ω–∞", command=on_cancel).pack(side=tk.LEFT, padx=10)
        
        top.transient(self.root)
        top.grab_set()
        entry.focus_set()
        self.root.wait_window(top)
        
        return result

    def create_document_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        method_frame = ttk.LabelFrame(tab, text="–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", padding=10)
        method_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.doc_cipher_method = tk.StringVar(value="base64")
        
        ttk.Radiobutton(
            method_frame, 
            text="Base64", 
            variable=self.doc_cipher_method, 
            value="base64"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        ttk.Radiobutton(
            method_frame, 
            text="–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥", 
            variable=self.doc_cipher_method, 
            value="binary"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        ttk.Radiobutton(
            method_frame, 
            text="XOR", 
            variable=self.doc_cipher_method, 
            value="xor"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(tab, text="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", padding=10)
        input_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.doc_text_input = scrolledtext.ScrolledText(
            input_frame, 
            wrap=tk.WORD, 
            width=80, 
            height=12, 
            font=('Consolas', 12),
            padx=10, 
            pady=10
        )
        self.doc_text_input.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —Ñ–∞–π–ª–æ–≤
        file_btn_frame = ttk.Frame(tab)
        file_btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(
            file_btn_frame, 
            text="üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", 
            command=self.open_document
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            file_btn_frame, 
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", 
            command=self.save_document_as
        ).pack(side=tk.LEFT, padx=5)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        crypto_btn_frame = ttk.Frame(tab)
        crypto_btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(
            crypto_btn_frame, 
            text="üìã –í—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", 
            command=self.paste_password_to_doc
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            crypto_btn_frame, 
            text="üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", 
            command=self.encrypt_document
        ).pack(side=tk.RIGHT, padx=5)
        
        ttk.Button(
            crypto_btn_frame, 
            text="üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", 
            command=self.decrypt_document
        ).pack(side=tk.RIGHT, padx=5)
        
        ttk.Button(
            crypto_btn_frame, 
            text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å", 
            command=self.clear_document
        ).pack(side=tk.LEFT, padx=5)

    def paste_password_to_doc(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            password = self.root.clipboard_get()
            if password:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª—è
                top = tk.Toplevel(self.root)
                top.title("–í—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è")
                top.geometry("300x100")
                
                tk.Label(top, text="–ü–∞—Ä–æ–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:").pack(pady=5)
                entry = ttk.Entry(top)
                entry.insert(0, password)
                entry.pack(pady=5)
                
                def apply_password():
                    method = self.doc_cipher_method.get()
                    if method == "base64":
                        try:
                            encrypted_text = base64_cipher(self.doc_text_input.get("1.0", tk.END).strip(), encrypt=True)
                            self.doc_text_input.delete('1.0', tk.END)
                            self.doc_text_input.insert('1.0', encrypted_text)
                            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
                        except Exception as e:
                            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")
                    elif method == "binary":
                        try:
                            encrypted_text = binary_cipher(self.doc_text_input.get("1.0", tk.END).strip(), encrypt=True)
                            self.doc_text_input.delete('1.0', tk.END)
                            self.doc_text_input.insert('1.0', encrypted_text)
                            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
                        except Exception as e:
                            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")
                    elif method == "xor":
                        encrypted_text = xor_cipher(self.doc_text_input.get("1.0", tk.END).strip(), entry.get())
                        self.doc_text_input.delete('1.0', tk.END)
                        self.doc_text_input.insert('1.0', encrypted_text)
                        self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
                    top.destroy()
                
                ttk.Button(top, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_password).pack(pady=5)
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {e}", "error")

    def open_document(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        filepath = filedialog.askopenfilename(
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if not filepath:
            return
            
        try:
            with open(filepath, 'r', encoding='utf-8') as file:
                content = file.read()
                self.doc_text_input.delete('1.0', tk.END)
                self.doc_text_input.insert('1.0', content)
                self.show_status(f"–§–∞–π–ª {os.path.basename(filepath)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", "error")

    def save_document_as(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        content = self.doc_text_input.get('1.0', tk.END).strip()
        if not content:
            self.show_status("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "warning")
            return
            
        filepath = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if not filepath:
            return
            
        try:
            with open(filepath, 'w', encoding='utf-8') as file:
                file.write(content)
                self.show_status(f"–§–∞–π–ª {os.path.basename(filepath)} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", "error")

    def encrypt_document(self):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        content = self.doc_text_input.get('1.0', tk.END).strip()
        if not content:
            self.show_status("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!", "warning")
            return
            
        method = self.doc_cipher_method.get()
        
        if method == "base64":
            self.base64_encrypt_doc(content)
        elif method == "binary":
            self.binary_encrypt_doc(content)
        elif method == "xor":
            self.xor_encrypt_doc(content)

    def decrypt_document(self):
        """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        content = self.doc_text_input.get('1.0', tk.END).strip()
        if not content:
            self.show_status("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!", "warning")
            return
            
        method = self.doc_cipher_method.get()
        
        if method == "base64":
            self.base64_decrypt_doc(content)
        elif method == "binary":
            self.binary_decrypt_doc(content)
        elif method == "xor":
            self.xor_decrypt_doc(content)

    def clear_document(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        self.doc_text_input.delete('1.0', tk.END)
        self.show_status("–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")

    def base64_encrypt_doc(self, text):
        try:
            encrypted_text = base64_cipher(text, encrypt=True)
            self.doc_text_input.delete('1.0', tk.END)
            self.doc_text_input.insert('1.0', encrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def base64_decrypt_doc(self, text):
        try:
            decrypted_text = base64_cipher(text, encrypt=False)
            self.doc_text_input.delete('1.0', tk.END)
            self.doc_text_input.insert('1.0', decrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def binary_encrypt_doc(self, text):
        try:
            encrypted_text = binary_cipher(text, encrypt=True)
            self.doc_text_input.delete('1.0', tk.END)
            self.doc_text_input.insert('1.0', encrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def binary_decrypt_doc(self, text):
        try:
            decrypted_text = binary_cipher(text, encrypt=False)
            self.doc_text_input.delete('1.0', tk.END)
            self.doc_text_input.insert('1.0', decrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def xor_encrypt_doc(self, text):
        key = self.ask_password("–í–≤–æ–¥ –∫–ª—é—á–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã):")
        if key and key != "":
            try:
                encrypted_text = xor_cipher(text, key)
                self.doc_text_input.delete('1.0', tk.END)
                self.doc_text_input.insert('1.0', encrypted_text)
                self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
            except Exception as e:
                self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def xor_decrypt_doc(self, text):
        key = self.ask_password("–í–≤–æ–¥ –∫–ª—é—á–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã):")
        if key and key != "":
            try:
                decrypted_text = xor_cipher(text, key)
                self.doc_text_input.delete('1.0', tk.END)
                self.doc_text_input.insert('1.0', decrypted_text)
                self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
            except Exception as e:
                self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def create_encryption_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        method_frame = ttk.LabelFrame(tab, text="–ú–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", padding=10)
        method_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.cipher_method = tk.StringVar(value="base64")
        
        ttk.Radiobutton(
            method_frame, 
            text="Base64", 
            variable=self.cipher_method, 
            value="base64"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        ttk.Radiobutton(
            method_frame, 
            text="–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥", 
            variable=self.cipher_method, 
            value="binary"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        ttk.Radiobutton(
            method_frame, 
            text="XOR", 
            variable=self.cipher_method, 
            value="xor"
        ).pack(anchor=tk.W, padx=5, pady=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(tab, text="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç", padding=10)
        input_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.text_input = scrolledtext.ScrolledText(
            input_frame, 
            wrap=tk.WORD, 
            width=80, 
            height=12, 
            font=('Consolas', 12),
            padx=10, 
            pady=10
        )
        self.text_input.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(tab)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(
            btn_frame, 
            text="üìã –í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", 
            command=self.paste_from_clipboard
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame, 
            text="üìã –í—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", 
            command=self.paste_password_to_text
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame, 
            text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å", 
            command=self.clear_text
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame, 
            text="üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", 
            command=self.encrypt_text
        ).pack(side=tk.RIGHT, padx=5)
        
        ttk.Button(
            btn_frame, 
            text="üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", 
            command=self.decrypt_text
        ).pack(side=tk.RIGHT, padx=5)

    def paste_password_to_text(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        try:
            password = self.root.clipboard_get()
            if password:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª—è
                top = tk.Toplevel(self.root)
                top.title("–í—Å—Ç–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è")
                top.geometry("300x100")
                
                tk.Label(top, text="–ü–∞—Ä–æ–ª—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:").pack(pady=5)
                entry = ttk.Entry(top)
                entry.insert(0, password)
                entry.pack(pady=5)
                
                def apply_password():
                    method = self.cipher_method.get()
                    text = self.text_input.get("1.0", tk.END).strip()
                    if method == "base64":
                        try:
                            encrypted_text = base64_cipher(text, encrypt=True)
                            self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Base64)", encrypted_text)
                            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
                        except Exception as e:
                            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")
                    elif method == "binary":
                        try:
                            encrypted_text = binary_cipher(text, encrypt=True)
                            self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)", encrypted_text)
                            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
                        except Exception as e:
                            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")
                    elif method == "xor":
                        encrypted_text = xor_cipher(text, entry.get())
                        self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (XOR)", encrypted_text)
                        self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
                    top.destroy()
                
                ttk.Button(top, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_password).pack(pady=5)
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {e}", "error")

    def create_password_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üîë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        settings_frame = ttk.LabelFrame(tab, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", padding=10)
        settings_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
        ttk.Label(settings_frame, text="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.length_var = tk.IntVar(value=16)
        ttk.Spinbox(
            settings_frame, 
            from_=8, 
            to=64, 
            textvariable=self.length_var, 
            width=5
        ).grid(row=0, column=1, sticky=tk.W, padx=5, pady=5)
        
        # –¢–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤
        self.upper_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame, 
            text="–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z)", 
            variable=self.upper_var
        ).grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        
        self.lower_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame, 
            text="–°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z)", 
            variable=self.lower_var
        ).grid(row=1, column=1, sticky=tk.W, padx=5, pady=2)
        
        self.digits_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame, 
            text="–¶–∏—Ñ—Ä—ã (0-9)", 
            variable=self.digits_var
        ).grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        
        self.symbols_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            settings_frame, 
            text="–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@# –∏ –¥—Ä.)", 
            variable=self.symbols_var
        ).grid(row=2, column=1, sticky=tk.W, padx=5, pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        ttk.Button(
            tab, 
            text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", 
            command=self.generate_password_gui
        ).pack(fill=tk.X, padx=5, pady=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_frame = ttk.LabelFrame(tab, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", padding=10)
        result_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.password_var = tk.StringVar()
        ttk.Entry(
            result_frame, 
            textvariable=self.password_var, 
            font=('Consolas', 14), 
            state='readonly'
        ).pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(
            result_frame, 
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", 
            command=self.copy_password
        ).pack(fill=tk.X, padx=5, pady=5)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä–æ–ª–µ–π
        history_frame = ttk.LabelFrame(tab, text="–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)", padding=10)
        history_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self.history_list = tk.Listbox(
            history_frame, 
            height=5, 
            font=('Consolas', 12)
        )
        self.history_list.pack(fill=tk.BOTH, expand=True)
        
        ttk.Button(
            history_frame, 
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", 
            command=self.copy_from_history
        ).pack(fill=tk.X, padx=5, pady=(5, 0))

    def encrypt_text(self):
        text = self.text_input.get("1.0", tk.END).strip()
        if not text:
            self.show_status("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!", "warning")
            return
            
        method = self.cipher_method.get()
        
        if method == "base64":
            self.base64_encrypt(text)
        elif method == "binary":
            self.binary_encrypt(text)
        elif method == "xor":
            self.xor_encrypt(text)
    
    def decrypt_text(self):
        text = self.text_input.get("1.0", tk.END).strip()
        if not text:
            self.show_status("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!", "warning")
            return
            
        method = self.cipher_method.get()
        
        if method == "base64":
            self.base64_decrypt(text)
        elif method == "binary":
            self.binary_decrypt(text)
        elif method == "xor":
            self.xor_decrypt(text)
    
    def base64_encrypt(self, text):
        try:
            encrypted_text = base64_cipher(text, encrypt=True)
            self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Base64)", encrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def base64_decrypt(self, text):
        try:
            decrypted_text = base64_cipher(text, encrypt=False)
            self.show_result("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Base64)", decrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (Base64)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def binary_encrypt(self, text):
        try:
            encrypted_text = binary_cipher(text, encrypt=True)
            self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)", encrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def binary_decrypt(self, text):
        try:
            decrypted_text = binary_cipher(text, encrypt=False)
            self.show_result("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)", decrypted_text)
            self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (–î–≤–æ–∏—á–Ω—ã–π –∫–æ–¥)!")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def xor_encrypt(self, text):
        key = self.ask_password("–í–≤–æ–¥ –∫–ª—é—á–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã):")
        if key and key != "":
            try:
                encrypted_text = xor_cipher(text, key)
                self.show_result("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (XOR)", encrypted_text)
                self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
            except Exception as e:
                self.show_status(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def xor_decrypt(self, text):
        key = self.ask_password("–í–≤–æ–¥ –∫–ª—é—á–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã):")
        if key and key != "":
            try:
                decrypted_text = xor_cipher(text, key)
                self.show_result("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (XOR)", decrypted_text)
                self.show_status("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω (XOR)!")
            except Exception as e:
                self.show_status(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}", "error")

    def generate_password_gui(self):
        chars = []
        if self.upper_var.get():
            chars.extend(string.ascii_uppercase)
        if self.lower_var.get():
            chars.extend(string.ascii_lowercase)
        if self.digits_var.get():
            chars.extend(string.digits)
        if self.symbols_var.get():
            chars.extend(string.punctuation)
            
        if not chars:
            self.show_status("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!", "warning")
            return
            
        password = generate_password(self.length_var.get(), chars)
        self.password_var.set(password)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–º–∞–∫—Å–∏–º—É–º 5)
        self.history_list.insert(0, password)
        if self.history_list.size() > 5:
            self.history_list.delete(5)
        
        self.show_status(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π {self.length_var.get()} —Å–∏–º–≤–æ–ª–æ–≤")
    
    def show_result(self, title, text):
        result_window = tk.Toplevel(self.root)
        result_window.title(title)
        result_window.geometry("600x400")
        
        text_area = scrolledtext.ScrolledText(
            result_window, 
            wrap=tk.WORD, 
            font=('Consolas', 12),
            padx=10, 
            pady=10
        )
        text_area.pack(fill=tk.BOTH, expand=True)
        
        text_area.insert(tk.END, text)
        text_area.config(state=tk.DISABLED)
        
        btn_frame = ttk.Frame(result_window)
        btn_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(
            btn_frame, 
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
            command=lambda: self.copy_to_clipboard(text)
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            btn_frame, 
            text="–ó–∞–∫—Ä—ã—Ç—å", 
            command=result_window.destroy
        ).pack(side=tk.RIGHT)
    
    def copy_password(self):
        password = self.password_var.get()
        if password:
            self.copy_to_clipboard(password)
            self.show_status("–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        else:
            self.show_status("–ù–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!", "warning")
    
    def copy_from_history(self):
        selection = self.history_list.curselection()
        if selection:
            password = self.history_list.get(selection[0])
            self.copy_to_clipboard(password)
            self.show_status("–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        else:
            self.show_status("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞!", "warning")
    
    def paste_from_clipboard(self):
        try:
            text = self.root.clipboard_get()
            self.text_input.insert(tk.END, text)
            self.show_status("–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}", "error")
    
    def clear_text(self):
        self.text_input.delete("1.0", tk.END)
        self.show_status("–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")
    
    def copy_to_clipboard(self, text):
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
    
    def show_status(self, message, status="info"):
        self.status_bar.config(text=message)
        if status == "error":
            self.status_bar.config(foreground="red")
        elif status == "warning":
            self.status_bar.config(foreground="orange")
        else:
            self.status_bar.config(foreground="green")

def base64_cipher(text, encrypt=True):
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Base64"""
    if encrypt:
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64
        text_bytes = text.encode('utf-8')
        base64_bytes = base64.b64encode(text_bytes)
        return base64_bytes.decode('utf-8')
    else:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Base64
        try:
            base64_bytes = text.encode('utf-8')
            text_bytes = base64.b64decode(base64_bytes)
            return text_bytes.decode('utf-8')
        except (base64.binascii.Error, UnicodeDecodeError) as e:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Base64") from e

def binary_cipher(text, encrypt=True):
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥"""
    if encrypt:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥
        binary_string = ""
        for char in text:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–≤–æ–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (8 –±–∏—Ç)
            binary_char = format(ord(char), '08b')
            binary_string += binary_char + " "  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        return binary_string.strip()
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 8 –±–∏—Ç
            binary_chars = text.split()
            text_string = ""
            for binary_char in binary_chars:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤–æ–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ, –∑–∞—Ç–µ–º –≤ —Å–∏–º–≤–æ–ª
                char_code = int(binary_char, 2)
                text_string += chr(char_code)
            return text_string
        except (ValueError, TypeError) as e:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥") from e

def xor_cipher(text, key):
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ XOR —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
    key_bytes = key.encode()
    result = []
    for i, char in enumerate(text):
        key_char = key_bytes[i % len(key_bytes)]
        result_char = chr(ord(char) ^ key_char)
        result.append(result_char)
    return ''.join(result)

def generate_password(length=12, chars=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    if chars is None:
        chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(chars) for _ in range(length))

if __name__ == '__main__':
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
